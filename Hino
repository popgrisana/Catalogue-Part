<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Hino Interactive Parts Catalog</title>
  <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
  <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.js"></script>
  <script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
    import { getAuth, signInAnonymously, signOut, onAuthStateChanged, signInWithCustomToken } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
    import { getFirestore, doc, setDoc, onSnapshot } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
    
    window.firebase = { initializeApp, getAuth, signInAnonymously, signOut, onAuthStateChanged, signInWithCustomToken, getFirestore, doc, setDoc, onSnapshot };
    window.firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
    window.initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
    window.appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
  </script>
  <style>
    .tooltip {
      position: absolute;
      background-color: #333;
      color: white;
      padding: 5px 10px;
      border-radius: 5px;
      font-size: 12px;
      white-space: nowrap;
      pointer-events: none;
      opacity: 0;
      transition: opacity 0.3s;
      z-index: 20;
    }
  </style>
</head>
<body class="bg-gray-50 p-6 font-sans">

  <div id="root"></div>

  <script type="text/babel">
    const { useState, useEffect, useRef } = React;
    const { initializeApp, getAuth, signInAnonymously, signOut, onAuthStateChanged, signInWithCustomToken, getFirestore, doc, setDoc, onSnapshot } = window.firebase;
    const firebaseConfig = window.firebaseConfig;
    const initialAuthToken = window.initialAuthToken;
    const appId = window.appId;

    const ADMIN_USER = 'Admin';
    const ADMIN_PASSWORD = 'Viriyah55555';

    function PasswordModal({ onLogin, onCancel, passwordInput, setPasswordInput, loginError }) {
      return (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded-lg shadow-xl w-80">
            <h3 className="text-xl font-semibold mb-4 text-gray-900">เข้าสู่โหมดแก้ไข</h3>
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-1">รหัสผ่าน</label>
              <input
                type="password"
                value={passwordInput}
                onChange={(e) => setPasswordInput(e.target.value)}
                onKeyDown={(e) => e.key === 'Enter' && onLogin()}
                className="w-full p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
              />
              {loginError && <p className="text-red-500 text-sm mt-1">{loginError}</p>}
            </div>
            <div className="flex justify-end space-x-2">
              <button
                onClick={onCancel}
                className="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg font-medium hover:bg-gray-300 transition-colors"
              >
                ยกเลิก
              </button>
              <button
                onClick={onLogin}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 transition-colors"
              >
                ยืนยัน
              </button>
            </div>
          </div>
        </div>
      );
    }

    const useFirestore = () => {
      const [db, setDb] = useState(null);
      const [auth, setAuth] = useState(null);
      const [user, setUser] = useState(null);
      const [isLoading, setIsLoading] = useState(true);

      useEffect(() => {
        try {
          const app = initializeApp(firebaseConfig);
          const fAuth = getAuth(app);
          const fDb = getFirestore(app);
          setAuth(fAuth);
          setDb(fDb);

          const unsubscribe = onAuthStateChanged(fAuth, async (currentUser) => {
            if (currentUser) {
              setUser(currentUser);
            } else {
              try {
                if (initialAuthToken) {
                  await signInWithCustomToken(fAuth, initialAuthToken);
                } else {
                  await signInAnonymously(fAuth);
                }
              } catch (e) {
                console.error("Firebase Auth error:", e);
                setUser(null);
              }
            }
            setIsLoading(false);
          });
          return () => unsubscribe();
        } catch (e) {
          console.error("Firebase initialization failed:", e);
          setIsLoading(false);
        }
      }, []);

      const getCartRef = (userId) => {
        if (!db || !userId) return null;
        return doc(db, `/artifacts/${appId}/users/${userId}/carts/mycart`);
      };

      const saveCart = async (userId, newCart) => {
        if (!db || !userId) return;
        try {
          const cartRef = getCartRef(userId);
          await setDoc(cartRef, { items: newCart });
        } catch (e) {
          console.error("Error saving cart to Firestore:", e);
        }
      };

      const listenToCart = (userId, callback) => {
        if (!db || !userId) return () => {};
        const cartRef = getCartRef(userId);
        const unsubscribe = onSnapshot(cartRef, (docSnap) => {
          if (docSnap.exists()) {
            callback(docSnap.data().items);
          } else {
            callback([]);
          }
        }, (error) => {
          console.error("Error listening to cart:", error);
        });
        return unsubscribe;
      };

      return { auth, user, isLoading, saveCart, listenToCart };
    };
    
    const PART_CATEGORIES = {
      C1: "C1 แท้ห้าง",
      C2: "C2 แท้นอก",
      C3: "C3 เทียมนอก",
      C4: "C4 เทียมใน",
      C5: "C5 เก่าถอด",
    };
    
    // Data for different views of the truck
    const initialTruckViews = {
        "ด้านหน้า": {
            img: "https://placehold.co/720x480/B0B0B0/FFFFFF?text=Hino+Truck+Front+View",
            parts: [
                { id: 1, x: 50, y: 15, name: "Body Parts", brand: "Hino", model: "F-Series", type: "Cab", body: "Truck", partNo: "001-HIN-A01", partCode: "CAB-A01", subParts: [{ name: PART_CATEGORIES.C1, price: 10000 }, { name: PART_CATEGORIES.C2, price: 5000 }, { name: PART_CATEGORIES.C3, price: 8000 }, { name: PART_CATEGORIES.C4, price: 2500 }, { name: PART_CATEGORIES.C5, price: 7500 }] },
                { id: 2, x: 45, y: 25, name: "Front Axle", brand: "Hino", model: "Truck", type: "Axle", body: "Truck", partNo: "002-HIN-A02", partCode: "AXL-A02", subParts: [{ name: PART_CATEGORIES.C1, price: 3000 }, { name: PART_CATEGORIES.C2, price: 1200 }, { name: PART_CATEGORIES.C3, price: 400 }, { name: PART_CATEGORIES.C4, price: 5000 }, { name: PART_CATEGORIES.C5, price: 2800 }] },
                { id: 15, x: 80, y: 65, name: "Front Panel", brand: "Hino", model: "F-Series", type: "Body", body: "Truck", partNo: "015-HIN-B15", partCode: "BDY-B15", subParts: [{ name: PART_CATEGORIES.C1, price: 3500 }, { name: PART_CATEGORIES.C2, price: 800 }, { name: PART_CATEGORIES.C3, price: 1500 }, { name: PART_CATEGORIES.C4, price: 500 }, { name: PART_CATEGORIES.C5, price: 6000 }] },
                { id: 20, x: 55, y: 20, name: "Alternator", brand: "Hino", model: "Truck", type: "Electrical", body: "Truck", partNo: "020-HIN-A20", partCode: "ELE-A20", subParts: [{ name: PART_CATEGORIES.C1, price: 5000 }, { name: PART_CATEGORIES.C2, price: 500 }, { name: PART_CATEGORIES.C3, price: 1800 }, { name: PART_CATEGORIES.C4, price: 350 }, { name: PART_CATEGORIES.C5, price: 250 }] },
                { id: 21, x: 50, y: 25, name: "Starter Motor", brand: "Hino", model: "Truck", type: "Electrical", body: "Truck", partNo: "021-HIN-S21", partCode: "ELE-S21", subParts: [{ name: PART_CATEGORIES.C1, price: 4500 }, { name: PART_CATEGORIES.C2, price: 1200 }, { name: PART_CATEGORIES.C3, price: 300 }, { name: PART_CATEGORIES.C4, price: 800 }, { name: PART_CATEGORIES.C5, price: 200 }] },
            ]
        },
        "ด้านหลัง": {
            img: "https://placehold.co/720x480/C0C0C0/FFFFFF?text=Hino+Truck+Rear+View",
            parts: [
                { id: 8, x: 55, y: 60, name: "Transmission", brand: "Hino", model: "J08C", type: "Drivetrain", body: "Truck", partNo: "008-HIN-T08", partCode: "DRV-T08", subParts: [{ name: PART_CATEGORIES.C1, price: 25000 }, { name: PART_CATEGORIES.C2, price: 1800 }, { name: PART_CATEGORIES.C3, price: 5000 }, { name: PART_CATEGORIES.C4, price: 7000 }, { name: PART_CATEGORIES.C5, price: 900 }] },
                { id: 14, x: 85, y: 75, name: "Tire", brand: "Hino", model: "Truck", type: "Wheel", body: "Truck", partNo: "014-HIN-W14", partCode: "WHL-W14", subParts: [{ name: PART_CATEGORIES.C1, price: 6500 }, { name: PART_CATEGORIES.C2, price: 4000 }, { name: PART_CATEGORIES.C3, price: 50 }, { name: PART_CATEGORIES.C4, price: 20 }, { name: PART_CATEGORIES.C5, price: 1200 }] },
                { id: 23, x: 40, y: 35, name: "Drive Shaft", brand: "Hino", model: "Truck", type: "Drivetrain", body: "Truck", partNo: "023-HIN-D23", partCode: "DRV-D23", subParts: [{ name: PART_CATEGORIES.C1, price: 7000 }, { name: PART_CATEGORIES.C2, price: 800 }, { name: PART_CATEGORIES.C3, price: 1500 }, { name: PART_CATEGORIES.C4, price: 1200 }, { name: PART_CATEGORIES.C5, price: 900 }] },
                { id: 24, x: 35, y: 40, name: "Differential", brand: "Hino", model: "Truck", type: "Axle", body: "Truck", partNo: "024-HIN-D24", partCode: "AXL-D24", subParts: [{ name: PART_CATEGORIES.C1, price: 6000 }, { name: PART_CATEGORIES.C2, price: 4500 }, { name: PART_CATEGORIES.C3, price: 8000 }, { name: PART_CATEGORIES.C4, price: 300 }, { name: PART_CATEGORIES.C5, price: 1500 }] },
                { id: 32, x: 85, y: 90, name: "Rear Axle", brand: "Hino", model: "Truck", type: "Axle", body: "Truck", partNo: "032-HIN-A32", partCode: "AXL-A32", subParts: [{ name: PART_CATEGORIES.C1, price: 5000 }, { name: PART_CATEGORIES.C2, price: 4000 }, { name: PART_CATEGORIES.C3, price: 1500 }, { name: PART_CATEGORIES.C4, price: 400 }, { name: PART_CATEGORIES.C5, price: 18000 }] },
            ]
        },
        "ด้านซ้าย": {
            img: "https://placehold.co/720x480/D0D0D0/FFFFFF?text=Hino+Truck+Left+Side+View",
            parts: [
                { id: 3, x: 30, y: 30, name: "Cylinder Head", brand: "Hino", model: "J08E", type: "Engine", body: "Truck", partNo: "11101-E0A00", partCode: "ENG-003-H", subParts: [{ name: PART_CATEGORIES.C1, price: 1500 }, { name: PART_CATEGORIES.C2, price: 250 }, { name: PART_CATEGORIES.C3, price: 500 }, { name: PART_CATEGORIES.C4, price: 600 }, { name: PART_CATEGORIES.C5, price: 150 }] },
                { id: 4, x: 25, y: 35, name: "Chassis Frame", brand: "Hino", model: "Truck", type: "Chassis", body: "Truck", partNo: "004-HIN-C04", partCode: "CHS-C04", subParts: [{ name: PART_CATEGORIES.C1, price: 4000 }, { name: PART_CATEGORIES.C2, price: 12000 }, { name: PART_CATEGORIES.C3, price: 50 }, { name: PART_CATEGORIES.C4, price: 800 }, { name: PART_CATEGORIES.C5, price: 1500 }] },
                { id: 5, x: 20, y: 40, name: "Brake System", brand: "Hino", model: "Bus", type: "Brake System", body: "Bus", partNo: "005-HIN-B05", partCode: "BRK-B05", subParts: [{ name: PART_CATEGORIES.C1, price: 800 }, { name: PART_CATEGORIES.C2, price: 3500 }, { name: PART_CATEGORIES.C3, price: 6000 }, { name: PART_CATEGORIES.C4, price: 2800 }, { name: PART_CATEGORIES.C5, price: 750 }] },
                { id: 6, x: 28, y: 50, name: "Fuel Tank", brand: "Hino", model: "Truck", type: "Fuel", body: "Truck", partNo: "006-HIN-F06", partCode: "FUE-F06", subParts: [{ name: PART_CATEGORIES.C1, price: 300 }, { name: PART_CATEGORIES.C2, price: 600 }, { name: PART_CATEGORIES.C3, price: 1500 }, { name: PART_CATEGORIES.C4, price: 450 }, { name: PART_CATEGORIES.C5, price: 200 }] },
                { id: 18, x: 65, y: 35, name: "Oil Pan", brand: "Hino", model: "J08E", type: "Lubrication", body: "Truck", partNo: "018-HIN-O18", partCode: "LUB-O18", subParts: [{ name: PART_CATEGORIES.C1, price: 3500 }, { name: PART_CATEGORIES.C2, price: 200 }, { name: PART_CATEGORIES.C3, price: 100 }, { name: PART_CATEGORIES.C4, price: 2800 }, { name: PART_CATEGORIES.C5, price: 450 }] },
                { id: 25, x: 30, y: 45, name: "Hydraulic Pump", brand: "Hino", model: "Truck", type: "Hydraulic", body: "Truck", partNo: "025-HIN-H25", partCode: "HYD-H25", subParts: [{ name: PART_CATEGORIES.C1, price: 8000 }, { name: PART_CATEGORIES.C2, price: 600 }, { name: PART_CATEGORIES.C3, price: 150 }, { name: PART_CATEGORIES.C4, price: 1200 }, { name: PART_CATEGORIES.C5, price: 250 }] },
                { id: 26, x: 25, y: 50, name: "Air Tank", brand: "Hino", model: "Bus", type: "Air System", body: "Bus", partNo: "026-HIN-A26", partCode: "AIR-A26", subParts: [{ name: PART_CATEGORIES.C1, price: 3000 }, { name: PART_CATEGORIES.C2, price: 800 }, { name: PART_CATEGORIES.C3, price: 100 }, { name: PART_CATEGORIES.C4, price: 400 }, { name: PART_CATEGORIES.C5, price: 80 }] },
                { id: 28, x: 45, y: 65, name: "Leaf Spring", brand: "Hino", model: "Truck", type: "Suspension", body: "Truck", partNo: "028-HIN-L28", partCode: "SUS-L28", subParts: [{ name: PART_CATEGORIES.C1, price: 3500 }, { name: PART_CATEGORIES.C2, price: 2000 }, { name: PART_CATEGORIES.C3, price: 300 }, { name: PART_CATEGORIES.C4, price: 250 }, { name: PART_CATEGORIES.C5, price: 600 }] },
            ]
        },
        "ด้านขวา": {
            img: "https://placehold.co/720x480/E0E0E0/FFFFFF?text=Hino+Truck+Right+Side+View",
            parts: [
                { id: 7, x: 40, y: 55, name: "Exhaust System", brand: "Hino", model: "Bus", type: "Exhaust", body: "Bus", partNo: "007-HIN-E07", partCode: "EXH-E07", subParts: [{ name: PART_CATEGORIES.C1, price: 3500 }, { name: PART_CATEGORIES.C2, price: 2000 }, { name: PART_CATEGORIES.C3, price: 4500 }, { name: PART_CATEGORIES.C4, price: 150 }, { name: PART_CATEGORIES.C5, price: 100 }] },
                { id: 9, x: 65, y: 65, name: "Radiator", brand: "Hino", model: "J08E", type: "Cooling", body: "Truck", partNo: "009-HIN-R09", partCode: "COL-R09", subParts: [{ name: PART_CATEGORIES.C1, price: 8500 }, { name: PART_CATEGORIES.C2, price: 300 }, { name: PART_CATEGORIES.C3, price: 150 }, { name: PART_CATEGORIES.C4, price: 1200 }, { name: PART_CATEGORIES.C5, price: 800 }] },
                { id: 10, x: 70, y: 70, name: "Steering Box", brand: "Hino", model: "Bus", type: "Steering", body: "Bus", partNo: "010-HIN-S10", partCode: "STR-S10", subParts: [{ name: PART_CATEGORIES.C1, price: 15000 }, { name: PART_CATEGORIES.C2, price: 1800 }, { name: PART_CATEGORIES.C3, price: 4500 }, { name: PART_CATEGORIES.C4, price: 2000 }, { name: PART_CATEGORIES.C5, price: 500 }] },
                { id: 11, x: 75, y: 75, name: "Suspension", brand: "Hino", model: "Truck", type: "Suspension", body: "Truck", partNo: "011-HIN-P11", partCode: "SUS-P11", subParts: [{ name: PART_CATEGORIES.C1, price: 7000 }, { name: PART_CATEGORIES.C2, price: 2500 }, { name: PART_CATEGORIES.C3, price: 300 }, { name: PART_CATEGORIES.C4, price: 200 }, { name: PART_CATEGORIES.C5, price: 500 }] },
                { id: 12, x: 80, y: 80, name: "Air Intake", brand: "Hino", model: "Truck", type: "Air System", body: "Truck", partNo: "012-HIN-A12", partCode: "AIR-A12", subParts: [{ name: PART_CATEGORIES.C1, price: 800 }, { name: PART_CATEGORIES.C2, price: 1200 }, { name: PART_CATEGORIES.C3, price: 25000 }, { name: PART_CATEGORIES.C4, price: 4000 }, { name: PART_CATEGORIES.C5, price: 1500 }] },
                { id: 13, x: 85, y: 85, name: "Clutch", brand: "Hino", model: "Bus", type: "Clutch", body: "Bus", partNo: "013-HIN-C13", partCode: "CLT-C13", subParts: [{ name: PART_CATEGORIES.C1, price: 2500 }, { name: PART_CATEGORIES.C2, price: 3500 }, { name: PART_CATEGORIES.C3, price: 6000 }, { name: PART_CATEGORIES.C4, price: 400 }, { name: PART_CATEGORIES.C5, price: 800 }] },
                { id: 16, x: 75, y: 55, name: "Engine Mount", brand: "Hino", model: "J08E", type: "Mount", body: "Truck", partNo: "016-HIN-M16", partCode: "MNT-M16", subParts: [{ name: PART_CATEGORIES.C1, price: 1500 }, { name: PART_CATEGORIES.C2, price: 1800 }, { name: PART_CATEGORIES.C3, price: 50 }, { name: PART_CATEGORIES.C4, price: 100 }, { name: PART_CATEGORIES.C5, price: 200 }] },
                { id: 17, x: 70, y: 45, name: "Wiring Harness", brand: "Hino", model: "Bus", type: "Electrical", body: "Bus", partNo: "017-HIN-E17", partCode: "ELE-E17", subParts: [{ name: PART_CATEGORIES.C1, price: 8000 }, { name: PART_CATEGORIES.C2, price: 2500 }, { name: PART_CATEGORIES.C3, price: 150 }, { name: PART_CATEGORIES.C4, price: 400 }, { name: PART_CATEGORIES.C5, price: 80 }] },
                { id: 19, x: 60, y: 25, name: "Water Pump", brand: "Hino", model: "J08E", type: "Cooling", body: "Truck", partNo: "019-HIN-W19", partCode: "COL-W19", subParts: [{ name: PART_CATEGORIES.C1, price: 2500 }, { name: PART_CATEGORIES.C2, price: 150 }, { name: PART_CATEGORIES.C3, price: 800 }, { name: PART_CATEGORIES.C4, price: 1500 }, { name: PART_CATEGORIES.C5, price: 300 }] },
                { id: 22, x: 45, y: 30, name: "Air Compressor", brand: "Hino", model: "Bus", type: "Air System", body: "Bus", partNo: "022-HIN-A22", partCode: "AIR-A22", subParts: [{ name: PART_CATEGORIES.C1, price: 12000 }, { name: PART_CATEGORIES.C2, price: 1800 }, { name: PART_CATEGORIES.C3, price: 3500 }, { name: PART_CATEGORIES.C4, price: 300 }, { name: PART_CATEGORIES.C5, price: 80 }] },
                { id: 27, x: 35, y: 60, name: "Shock Absorber", brand: "Hino", model: "Bus", type: "Suspension", body: "Bus", partNo: "027-HIN-S27", partCode: "SUS-S27", subParts: [{ name: PART_CATEGORIES.C1, price: 2500 }, { name: PART_CATEGORIES.C2, price: 200 }, { name: PART_CATEGORIES.C3, price: 500 }, { name: PART_CATEGORIES.C4, price: 80 }, { name: PART_CATEGORIES.C5, price: 50 }] },
                { id: 29, x: 55, y: 70, name: "Air Spring", brand: "Hino", model: "Bus", type: "Suspension", body: "Bus", partNo: "029-HIN-A29", partCode: "SUS-A29", subParts: [{ name: PART_CATEGORIES.C1, price: 8000 }, { name: PART_CATEGORIES.C2, price: 150 }, { name: PART_CATEGORIES.C3, price: 1200 }, { name: PART_CATEGORIES.C4, price: 500 }, { name: PART_CATEGORIES.C5, price: 800 }] },
                { id: 30, x: 65, y: 75, name: "Steering Column", brand: "Hino", model: "Truck", type: "Steering", body: "Truck", partNo: "030-HIN-S30", partCode: "STR-S30", subParts: [{ name: PART_CATEGORIES.C1, price: 3000 }, { name: PART_CATEGORIES.C2, price: 800 }, { name: PART_CATEGORIES.C3, price: 500 }, { name: PART_CATEGORIES.C4, price: 200 }, { name: PART_CATEGORIES.C5, price: 1500 }] },
                { id: 31, x: 75, y: 80, name: "Power Steering Pump", brand: "Hino", model: "Truck", type: "Steering", body: "Truck", partNo: "031-HIN-S31", partCode: "STR-S31", subParts: [{ name: PART_CATEGORIES.C1, price: 4500 }, { name: PART_CATEGORIES.C2, price: 600 }, { name: PART_CATEGORIES.C3, price: 800 }, { name: PART_CATEGORIES.C4, price: 500 }, { name: PART_CATEGORIES.C5, price: 50 }] },
                { id: 33, x: 90, y: 95, name: "Air Brake Chamber", brand: "Hino", model: "Bus", type: "Brake", body: "Bus", partNo: "033-HIN-B33", partCode: "BRK-B33", subParts: [{ name: PART_CATEGORIES.C1, price: 2500 }, { name: PART_CATEGORIES.C2, price: 500 }, { name: PART_CATEGORIES.C3, price: 300 }, { name: PART_CATEGORIES.C4, price: 400 }, { name: PART_CATEGORIES.C5, price: 150 }] },
            ]
        },
    };

    function EditPriceModal({ subPart, onSave, onCancel }) {
        const [newPrice, setNewPrice] = useState(subPart.price);

        return (
            <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex items-center justify-center z-50">
                <div className="bg-white p-6 rounded-lg shadow-xl w-80">
                    <h3 className="text-xl font-semibold mb-4">แก้ไขราคาสำหรับ {subPart.name}</h3>
                    <div className="mb-4">
                        <label className="block text-sm font-medium text-gray-700 mb-1">ราคาเดิม</label>
                        <p className="p-2 border border-gray-300 rounded-md bg-gray-100">{subPart.price} บาท</p>
                    </div>
                    <div className="mb-4">
                        <label htmlFor="new-price" className="block text-sm font-medium text-gray-700 mb-1">ราคาใหม่</label>
                        <input
                            id="new-price"
                            type="number"
                            value={newPrice}
                            onChange={(e) => setNewPrice(e.target.value)}
                            className="w-full p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                            placeholder="ใส่ราคาใหม่"
                        />
                    </div>
                    <div className="flex justify-end space-x-2">
                        <button
                            onClick={() => onCancel()}
                            className="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg font-medium hover:bg-gray-300 transition-colors"
                        >
                            ยกเลิก
                        </button>
                        <button
                            onClick={() => onSave(Number(newPrice))}
                            className="px-4 py-2 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 transition-colors"
                        >
                            บันทึก
                        </button>
                    </div>
                </div>
            </div>
        );
    }
    
    function ConfirmationModal({ message, onConfirm, onCancel }) {
      return (
          <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex items-center justify-center z-50">
              <div className="bg-white p-6 rounded-lg shadow-xl max-w-sm text-center">
                  <p className="text-lg mb-4">{message}</p>
                  <div className="flex justify-center space-x-4">
                      <button
                          onClick={onConfirm}
                          className="px-4 py-2 bg-red-600 text-white rounded-lg font-medium hover:bg-red-700 transition-colors"
                      >
                          ยืนยัน
                      </button>
                      <button
                          onClick={onCancel}
                          className="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg font-medium hover:bg-gray-300 transition-colors"
                      >
                          ยกเลิก
                      </button>
                  </div>
              </div>
          </div>
      );
    }
    
    function HinoPartsCatalog() {
      const [partsData, setPartsData] = useState(initialTruckViews);
      const [currentView, setCurrentView] = useState("ด้านหน้า");
      const [activePart, setActivePart] = useState(null);
      const [cart, setCart] = useState([]);
      const [editingSubPart, setEditingSubPart] = useState(null);
      const [isEditMode, setIsEditMode] = useState(false);
      const [vatRate, setVatRate] = useState(7);
      const dragRef = useRef(null);
      const containerRef = useRef(null);
      const [uploadedImage, setUploadedImage] = useState(null);
      const [isEditingVehicleInfo, setIsEditingVehicleInfo] = useState(false);
      const [editingVehicleInfo, setEditingVehicleInfo] = useState({});
      const [isEditingPartInfo, setIsEditingPartInfo] = useState(false);
      const [editingPartInfo, setEditingPartInfo] = useState({});
      const [quantities, setQuantities] = useState({});
      const [isConfirmingDelete, setIsConfirmingDelete] = useState(false);
      const [hoveredPart, setHoveredPart] = useState(null);
      const [editingPartId, setEditingPartId] = useState(null);
      const [newPartId, setNewPartId] = useState('');
      const [idError, setIdError] = useState('');
      const [showPasswordModal, setShowPasswordModal] = useState(false);
      const [passwordInput, setPasswordInput] = useState('');
      const [loginError, setLoginError] = useState('');
      
      const { auth, user, isLoading, saveCart, listenToCart } = useFirestore();

      useEffect(() => {
        if (user) {
          const unsubscribe = listenToCart(user.uid, (newCart) => {
            setCart(newCart);
          });
          return () => unsubscribe();
        } else {
          setCart([]);
        }
      }, [user]);

      useEffect(() => {
        if (user) {
          saveCart(user.uid, cart);
        }
      }, [cart, user]);
      
      useEffect(() => {
        setActivePart(null);
      }, [currentView]);

      useEffect(() => {
        if(activePart) {
          setEditingVehicleInfo({
            brand: activePart.brand,
            model: activePart.model,
            type: activePart.type,
            body: activePart.body
          });
          setEditingPartInfo({
            name: activePart.name,
            partNo: activePart.partNo,
            partCode: activePart.partCode
          });
          const initialQuantities = activePart.subParts.reduce((acc, subPart) => {
            acc[subPart.name] = 1;
            return acc;
          }, {});
          setQuantities(initialQuantities);
        }
      }, [activePart]);

      const handleLogin = () => {
        if (passwordInput === ADMIN_PASSWORD) {
            setIsEditMode(true);
            setShowPasswordModal(false);
            setLoginError('');
        } else {
            setLoginError('รหัสผ่านไม่ถูกต้อง');
        }
      };

      const handleImageError = (e) => {
        e.target.onerror = null;
        e.target.src = 'https://placehold.co/720x480/F0F4F8/60A5FA?text=Image+Not+Found';
      };

      // --- Drag & Drop Logic for numbers ---
      const handleMouseDown = (e, id) => {
        if (isEditMode && !editingPartId) {
          e.preventDefault();
          const rect = containerRef.current.getBoundingClientRect();
          dragRef.current = {
            id,
            offsetX: e.clientX - (rect.left + (partsData[currentView].parts.find(p => p.id === id).x / 100) * rect.width),
            offsetY: e.clientY - (rect.top + (partsData[currentView].parts.find(p => p.id === id).y / 100) * rect.height),
          };
        }
      };

      const handleMouseMove = (e) => {
        if (isEditMode && dragRef.current) {
          e.preventDefault();
          const { id, offsetX, offsetY } = dragRef.current;
          const rect = containerRef.current.getBoundingClientRect();
          const newX = ((e.clientX - rect.left - offsetX) / rect.width) * 100;
          const newY = ((e.clientY - rect.top - offsetY) / rect.height) * 100;
          
          const newPartsData = JSON.parse(JSON.stringify(partsData));
          const updatedParts = newPartsData[currentView].parts.map(p =>
            p.id === id ? { ...p, x: Math.max(0, Math.min(100, newX)), y: Math.max(0, Math.min(100, newY)) } : p
          );
          newPartsData[currentView].parts = updatedParts;
          setPartsData(newPartsData);
        }
      };

      const handleMouseUp = () => {
        dragRef.current = null;
      };
      
      useEffect(() => {
        const imageContainer = containerRef.current;
        if (isEditMode && imageContainer) {
          imageContainer.addEventListener('mousemove', handleMouseMove);
          imageContainer.addEventListener('mouseup', handleMouseUp);
        }
        return () => {
          if (imageContainer) {
            imageContainer.removeEventListener('mousemove', handleMouseMove);
            imageContainer.removeEventListener('mouseup', handleMouseUp);
          }
        };
      }, [isEditMode, partsData, currentView]);
      
      function selectPart(id) {
        if (!isEditMode && !editingPartId) {
          const p = partsData[currentView].parts.find((x) => x.id === id);
          setActivePart(p);
          setIsEditingVehicleInfo(false);
          setIsEditingPartInfo(false);
        }
      }

      function addToCart(partId, subPartName) {
        const part = partsData[currentView].parts.find(p => p.id === partId);
        if (!part) return;
        const subPart = part.subParts.find(sp => sp.name === subPartName);
        if (!subPart) return;

        const qty = Number(quantities[subPartName]) || 1;
        const itemToAdd = {
          id: `${partId}-${subPart.name}`,
          partId: partId,
          partName: part.name,
          subPartName: subPart.name,
          price: subPart.price,
          qty: qty,
          discountPercent: 0
        };

        const updatedCart = (() => {
          const existingItem = cart.find(x => x.id === itemToAdd.id);
          if (existingItem) {
            return cart.map(x => x.id === itemToAdd.id ? { ...x, qty: x.qty + qty } : x);
          }
          return [...cart, itemToAdd];
        })();
        setCart(updatedCart);
      }

      function removeFromCart(id) {
        const updatedCart = cart.map(x => (x.id === id ? { ...x, qty: x.qty - 1 } : x)).filter(x => x.qty > 0);
        setCart(updatedCart);
      }

      function updateQty(id, qty) {
        const safeQty = Number(qty) > 0 ? Number(qty) : 1;
        const updatedCart = cart.map(x => (x.id === id ? { ...x, qty: safeQty } : x));
        setCart(updatedCart);
      }

      function updateDiscountPercent(id, discountPercent) {
        const safeDiscount = Math.max(0, Math.min(100, Number(discountPercent) || 0));
        const updatedCart = cart.map(x => (x.id === id ? { ...x, discountPercent: safeDiscount } : x));
        setCart(updatedCart);
      }
      
      function groupCartItems() {
        return cart.reduce((acc, item) => {
          const { subPartName } = item;
          if (!acc[subPartName]) {
            acc[subPartName] = [];
          }
          acc[subPartName].push(item);
          return acc;
        }, {});
      }

      function calculateTotals() {
        const subtotal = cart.reduce(
          (sum, item) => sum + (Number(item.price) * Number(item.qty)),
          0
        );
        const totalDiscount = cart.reduce(
            (sum, item) => sum + (Number(item.price) * Number(item.qty) * (Number(item.discountPercent) / 100)),
            0
        );
        const subtotalAfterDiscount = subtotal - totalDiscount;
        const vatAmount = subtotalAfterDiscount * (vatRate / 100);
        const grandTotal = subtotalAfterDiscount + vatAmount;
        
        const discountsByCategory = Object.keys(PART_CATEGORIES).reduce((acc, key) => {
            const categoryName = PART_CATEGORIES[key];
            const categoryDiscount = cart.reduce((sum, item) => {
                if (item.subPartName === categoryName) {
                    return sum + (Number(item.price) * Number(item.qty) * (Number(item.discountPercent) / 100));
                }
                return sum;
            }, 0);
            acc[categoryName] = categoryDiscount;
            return acc;
        }, {});
        
        return { subtotal, totalDiscount, subtotalAfterDiscount, vatAmount, grandTotal, discountsByCategory };
      }
      
      const handlePrint = () => {
        window.print();
      };
      
      const handleSavePDF = () => {
        const cartContent = document.getElementById('cart-content');
        if (!cartContent) {
          console.error("Cart content element not found.");
          return;
        }

        if (window.jspdf && window.html2canvas) {
          html2canvas(cartContent).then(canvas => {
            const imgData = canvas.toDataURL('image/png');
            const pdf = new jspdf.jsPDF('p', 'mm', 'a4');
            const imgWidth = 210;
            const pageHeight = 297;
            const imgHeight = canvas.height * imgWidth / canvas.width;
            let heightLeft = imgHeight;
            let position = 0;

            pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
            heightLeft -= pageHeight;

            while (heightLeft >= 0) {
              position = heightLeft - imgHeight;
              pdf.addPage();
              pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
              heightLeft -= pageHeight;
            }

            pdf.save("hino_cart.pdf");
          });
        } else {
          console.error("jsPDF or html2canvas not loaded.");
        }
      };

      function startEditingSubPartPrice(subPart) {
        setEditingSubPart(subPart);
      }

      function cancelEditingSubPartPrice() {
        setEditingSubPart(null);
      }

      function saveSubPartPrice(newPrice) {
        if (!activePart || !editingSubPart) return;
        const safePrice = Number(newPrice);
        const newPartsData = JSON.parse(JSON.stringify(partsData));
        const updatedParts = newPartsData[currentView].parts.map(p =>
          p.id === activePart.id
            ? {
                ...p,
                subParts: p.subParts.map(sp =>
                  sp.name === editingSubPart.name ? { ...sp, price: isNaN(safePrice) ? 0 : safePrice } : sp
                )
              }
            : p
        );
        newPartsData[currentView].parts = updatedParts;
        setPartsData(newPartsData);
        setEditingSubPart(null);
      }
      
      function handleImageUpload(e) {
        const file = e.target.files[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = (ev) => setUploadedImage(ev.target.result);
          reader.readAsDataURL(file);
        }
      }
      
      function handleSaveVehicleInfo() {
        if (!activePart) return;
        const newPartsData = JSON.parse(JSON.stringify(partsData));
        const updatedParts = newPartsData[currentView].parts.map(p => 
          p.id === activePart.id
            ? { ...p, brand: editingVehicleInfo.brand, model: editingVehicleInfo.model, type: editingVehicleInfo.type, body: editingVehicleInfo.body }
            : p
        );
        newPartsData[currentView].parts = updatedParts;
        setPartsData(newPartsData);
        setActivePart(prev => ({ ...prev, brand: editingVehicleInfo.brand, model: editingVehicleInfo.model, type: editingVehicleInfo.type, body: editingVehicleInfo.body }));
        setIsEditingVehicleInfo(false);
      }
      
      function handleSavePartInfo() {
        if (!activePart) return;
        const newPartsData = JSON.parse(JSON.stringify(partsData));
        const updatedParts = newPartsData[currentView].parts.map(p => 
          p.id === activePart.id
            ? { ...p, name: editingPartInfo.name, partNo: editingPartInfo.partNo, partCode: editingPartInfo.partCode }
            : p
        );
        newPartsData[currentView].parts = updatedParts;
        setPartsData(newPartsData);
        setActivePart(prev => ({ ...prev, name: editingPartInfo.name, partNo: editingPartInfo.partNo, partCode: editingPartInfo.partCode }));
        setIsEditingPartInfo(false);
      }
      
      function handleQuantityChange(subPartName, value) {
        const safeValue = Number(value) > 0 ? Number(value) : 1;
        setQuantities(prev => ({ ...prev, [subPartName]: safeValue }));
      }
      
      function handleLoginLogout() {
        if (user) {
          signOut(auth).catch(e => console.error("Logout failed:", e));
        } else {
          if (initialAuthToken) {
            signInWithCustomToken(auth, initialAuthToken).catch(e => console.error("Login failed:", e));
          } else {
            signInAnonymously(auth).catch(e => console.error("Login failed:", e));
          }
        }
      }
      
      function handleAddPart() {
        // Find the maximum existing ID to generate a new unique ID
        const allParts = Object.values(partsData).flatMap(view => view.parts);
        const maxId = allParts.length > 0 ? Math.max(...allParts.map(p => p.id)) : 0;
        const newId = maxId + 1;

        const newPart = {
          id: newId,
          x: 50, // Default position in the center
          y: 50,
          name: "อะไหล่ใหม่",
          brand: "Hino",
          model: "Unknown",
          type: "Part",
          body: "Truck",
          partNo: "NEW-PART",
          partCode: "NEW-CODE",
          subParts: [{ name: PART_CATEGORIES.C1, price: 0 }]
        };

        const newPartsData = JSON.parse(JSON.stringify(partsData));
        newPartsData[currentView].parts.push(newPart);
        setPartsData(newPartsData);
        setActivePart(newPart);
      }
      
      function handleDeletePart() {
        if (!activePart) return;
        setIsConfirmingDelete(true);
      }
      
      function confirmDelete() {
        if (!activePart) return;
        const newPartsData = JSON.parse(JSON.stringify(partsData));
        newPartsData[currentView].parts = newPartsData[currentView].parts.filter(p => p.id !== activePart.id);
        setPartsData(newPartsData);
        setActivePart(null);
        setIsConfirmingDelete(false);
      }
      
      function cancelDelete() {
        setIsConfirmingDelete(false);
      }
      
      const handlePartHover = (part) => {
        setHoveredPart(part);
      };

      const handlePartLeave = () => {
        setHoveredPart(null);
      };
      
      // Function to handle double-click on part ID for editing
      const handleIdDoubleClick = (partId) => {
        if (isEditMode) {
          setEditingPartId(partId);
          setNewPartId(partId.toString());
          setIdError('');
        }
      };

      // Function to handle changes in the ID input field
      const handleIdChange = (e) => {
        const value = e.target.value;
        setNewPartId(value);
      };

      // Function to save the new ID
      const handleSaveId = () => {
        const value = parseInt(newPartId, 10);
        
        // Check if value is a valid number and not the same as the original ID
        if (isNaN(value) || value <= 0 || value === editingPartId) {
          setIdError('กรุณาใส่หมายเลขที่ถูกต้อง');
          return;
        }

        // Check for uniqueness
        const isDuplicate = partsData[currentView].parts.some(p => p.id === value);
        if (isDuplicate) {
          setIdError('หมายเลขนี้ซ้ำกับหมายเลขอื่นในมุมมองปัจจุบัน');
          return;
        }

        const newPartsData = JSON.parse(JSON.stringify(partsData));
        const updatedParts = newPartsData[currentView].parts.map(p =>
          p.id === editingPartId ? { ...p, id: value } : p
        );
        newPartsData[currentView].parts = updatedParts;
        setPartsData(newPartsData);
        setEditingPartId(null);
        setIdError('');
      };
      
      const handleKeyDown = (e) => {
        if (e.key === 'Enter') {
            handleSaveId();
        }
      };

      const currentParts = partsData[currentView].parts;
      const currentImage = uploadedImage || partsData[currentView].img;
      const currentSubParts = activePart ? activePart.subParts : (currentParts.length > 0 ? currentParts[0].subParts : []);
      const groupedCartItems = groupCartItems();
      const { subtotal, totalDiscount, subtotalAfterDiscount, vatAmount, grandTotal, discountsByCategory } = calculateTotals();

      return (
        <div className="min-h-screen bg-gray-50 p-6 font-sans">
          <div className="flex justify-between items-center mb-4">
            <h1 className="text-2xl font-bold">แคตตาล็อกอะไหล่ HINO</h1>
            <div className="text-right">
              {isLoading ? (
                <span className="text-gray-500">กำลังโหลด...</span>
              ) : (
                <>
                  <p className="text-sm text-gray-600 mb-1">
                    {user ? `Logged in as: ${user.uid}` : "ไม่ได้ล็อกอิน"}
                  </p>
                  <button
                    onClick={handleLoginLogout}
                    className={`px-4 py-2 rounded-lg font-medium transition-colors w-full lg:w-auto ${user ? 'bg-red-500 text-white' : 'bg-green-500 text-white'}`}
                  >
                    {user ? "ล็อกเอาต์" : "ล็อกอิน"}
                  </button>
                </>
              )}
            </div>
          </div>
          
          <div className="flex flex-col lg:flex-row gap-6">
            <div className="flex-1 bg-white rounded-lg shadow p-4">
              <div className="flex flex-col lg:flex-row items-center gap-4">
                <button
                  onClick={() => {
                    if (isEditMode) {
                        setIsEditMode(false);
                        setEditingPartId(null);
                        setIdError('');
                    } else {
                        setShowPasswordModal(true);
                    }
                  }}
                  className={`px-4 py-2 rounded-lg font-medium transition-colors w-full lg:w-auto ${isEditMode ? 'bg-red-500 text-white' : 'bg-blue-500 text-white'}`}
                >
                  {isEditMode ? "ปิดโหมดแก้ไข" : "เปิดโหมดแก้ไข"}
                </button>
                {isEditMode && (
                  <div className="flex items-center gap-4 w-full mt-4 lg:mt-0">
                    <label className="block text-sm font-medium whitespace-nowrap">อัปโหลดรูปใหม่</label>
                    <input type="file" accept="image/*" onChange={handleImageUpload} className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"/>
                  </div>
                )}
              </div>
              
              <div className="mt-6 flex flex-col lg:flex-row justify-between items-center gap-4">
                <div className="flex items-center gap-4">
                  <label htmlFor="view-select" className="block text-sm font-medium whitespace-nowrap">มุมมองรถ:</label>
                  <select 
                    id="view-select" 
                    value={currentView} 
                    onChange={(e) => setCurrentView(e.target.value)}
                    className="block w-full max-w-xs p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                  >
                    {Object.keys(partsData).map(view => (
                      <option key={view} value={view}>{view}</option>
                    ))}
                  </select>
                </div>
                {isEditMode && (
                  <div className="flex gap-2 w-full lg:w-auto mt-2 lg:mt-0">
                    <button
                      onClick={handleAddPart}
                      className="px-4 py-2 bg-green-500 text-white rounded-lg font-medium w-full lg:w-auto"
                    >
                      เพิ่มอะไหล่ใหม่
                    </button>
                    <button
                      onClick={handleDeletePart}
                      className={`px-4 py-2 rounded-lg font-medium w-full lg:w-auto ${activePart ? 'bg-red-500 text-white' : 'bg-gray-300 text-gray-500 cursor-not-allowed'}`}
                      disabled={!activePart}
                    >
                      ลบอะไหล่
                    </button>
                  </div>
                )}
              </div>

              <div className="mt-6">
                <div ref={containerRef} className="relative" style={{ maxWidth: 720, margin: '0 auto' }}>
                    <img
                      src={currentImage}
                      alt={`Hino Truck ${currentView} View`}
                      className="w-full h-auto rounded-lg mb-4"
                      onError={handleImageError}
                    />
                    {currentParts.map((p) => (
                    <button
                      key={p.id}
                      title={p.name}
                      onClick={() => selectPart(p.id)}
                      onMouseDown={(e) => handleMouseDown(e, p.id)}
                      onMouseEnter={() => handlePartHover(p)}
                      onMouseLeave={handlePartLeave}
                      onDoubleClick={() => handleIdDoubleClick(p.id)}
                      className={`absolute transform -translate-x-1/2 -translate-y-1/2 border-2 border-white rounded-full shadow-lg ${isEditMode ? 'cursor-grab active:cursor-grabbing' : 'cursor-pointer'} ${activePart && activePart.id === p.id ? 'ring-4 ring-blue-500' : ''}`}
                      style={{
                        left: `${p.x}%`,
                        top: `${p.y}%`,
                        width: 36,
                        height: 36,
                        background: "rgba(59,130,246,0.85)",
                        color: "white",
                        display: "flex",
                        alignItems: "center",
                        justifyContent: "center",
                        fontWeight: "700",
                        zIndex: 10
                      }}
                    >
                      {isEditMode && editingPartId === p.id ? (
                        <input
                          type="number"
                          value={newPartId}
                          onChange={handleIdChange}
                          onBlur={handleSaveId}
                          onKeyDown={handleKeyDown}
                          autoFocus
                          className="w-10 text-center bg-transparent text-white focus:outline-none"
                        />
                      ) : (
                        p.id
                      )}
                    </button>
                  ))}
                  {idError && <p className="text-red-500 text-center mt-2">{idError}</p>}
                  {hoveredPart && (
                    <div
                      className="tooltip"
                      style={{
                        left: `${hoveredPart.x}%`,
                        top: `${hoveredPart.y - 5}%`,
                        opacity: 1
                      }}
                    >
                      {hoveredPart.name}
                    </div>
                  )}
                </div>

                {isEditMode && <p className="mt-4 text-center text-sm text-gray-600">ลากหมายเลขเพื่อปรับตำแหน่ง</p>}
                
                <div className="grid grid-cols-1 gap-6 mt-6">
                  <div className="col-span-1 bg-white rounded-lg shadow p-4">
                    <div className="flex justify-between items-center mb-2">
                      <h2 className="text-lg font-semibold">ข้อมูลรถ</h2>
                      {isEditMode && (
                        <button
                          onClick={() => {
                            if (activePart) {
                              setIsEditingVehicleInfo(true);
                            }
                          }}
                          className={`text-sm px-3 py-1 rounded-lg transition-colors ${activePart ? 'bg-yellow-500 text-white' : 'bg-gray-300 text-gray-500 cursor-not-allowed'}`}
                          disabled={!activePart}
                        >
                          แก้ไข
                        </button>
                      )}
                    </div>
                    <div className="text-sm space-y-3 md:grid md:grid-cols-2 md:gap-x-4">
                      {isEditingVehicleInfo && activePart ? (
                        <>
                          <div>
                            <p className="font-medium">ยี่ห้อ:</p>
                            <input
                              type="text"
                              value={editingVehicleInfo.brand}
                              onChange={(e) => setEditingVehicleInfo({ ...editingVehicleInfo, brand: e.target.value })}
                              className="pl-4 w-full border rounded p-1"
                            />
                          </div>
                          <div>
                            <p className="font-medium">แบบ:</p>
                            <input
                              type="text"
                              value={editingVehicleInfo.model}
                              onChange={(e) => setEditingVehicleInfo({ ...editingVehicleInfo, model: e.target.value })}
                              className="pl-4 w-full border rounded p-1"
                            />
                          </div>
                          <div>
                            <p className="font-medium">รุ่น:</p>
                            <input
                              type="text"
                              value={editingVehicleInfo.type}
                              onChange={(e) => setEditingVehicleInfo({ ...editingVehicleInfo, type: e.target.value })}
                              className="pl-4 w-full border rounded p-1"
                            />
                          </div>
                          <div>
                            <p className="font-medium">ตัวถัง:</p>
                            <input
                              type="text"
                              value={editingVehicleInfo.body}
                              onChange={(e) => setEditingVehicleInfo({ ...editingVehicleInfo, body: e.target.value })}
                              className="pl-4 w-full border rounded p-1"
                            />
                          </div>
                          <div className="flex gap-2 mt-4 md:col-span-2">
                            <button onClick={handleSaveVehicleInfo} className="px-3 py-1 bg-green-500 text-white rounded-lg">
                              บันทึก
                            </button>
                            <button onClick={() => setIsEditingVehicleInfo(false)} className="px-3 py-1 bg-gray-400 text-white rounded-lg">
                              ยกเลิก
                            </button>
                          </div>
                        </>
                      ) : (
                        <>
                          <div>
                            <p className="font-medium">ยี่ห้อ:</p>
                            <p className="pl-4">{activePart ? activePart.brand : '---'}</p>
                          </div>
                          <div>
                            <p className="font-medium">แบบ:</p>
                            <p className="pl-4">{activePart ? activePart.model : '---'}</p>
                          </div>
                          <div>
                            <p className="font-medium">รุ่น:</p>
                            <p className="pl-4">{activePart ? activePart.type : '---'}</p>
                          </div>
                          <div>
                            <p className="font-medium">ตัวถัง:</p>
                            <p className="pl-4">{activePart ? activePart.body : '---'}</p>
                          </div>
                        </>
                      )}
                    </div>
                  </div>

                  <div className="col-span-1 bg-white rounded-lg shadow p-4">
                    <div className="flex justify-between items-center mb-2">
                      <h2 className="text-lg font-semibold">รายละเอียดอะไหล่</h2>
                      {isEditMode && (
                        <button
                          onClick={() => {
                            if (activePart) {
                              setIsEditingPartInfo(true);
                            }
                          }}
                          className={`text-sm px-3 py-1 rounded-lg transition-colors ${activePart ? 'bg-yellow-500 text-white' : 'bg-gray-300 text-gray-500 cursor-not-allowed'}`}
                          disabled={!activePart}
                        >
                          แก้ไข
                        </button>
                      )}
                    </div>
                      <div className="text-sm space-y-3 md:grid md:grid-cols-2 md:gap-x-4">
                          {isEditingPartInfo && activePart ? (
                            <>
                              <div>
                                <p className="font-medium">ชื่ออะไหล่:</p>
                                <input
                                  type="text"
                                  value={editingPartInfo.name}
                                  onChange={(e) => setEditingPartInfo({ ...editingPartInfo, name: e.target.value })}
                                  className="pl-4 w-full border rounded p-1"
                                />
                              </div>
                              <div>
                                <p className="font-medium">Part No.:</p>
                                <input
                                  type="text"
                                  value={editingPartInfo.partNo}
                                  onChange={(e) => setEditingPartInfo({ ...editingPartInfo, partNo: e.target.value })}
                                  className="pl-4 w-full border rounded p-1"
                                />
                              </div>
                              <div>
                                <p className="font-medium">รหัสอะไหล่:</p>
                                <input
                                  type="text"
                                  value={editingPartInfo.partCode}
                                  onChange={(e) => setEditingPartInfo({ ...editingPartInfo, partCode: e.target.value })}
                                  className="pl-4 w-full border rounded p-1"
                                />
                              </div>
                              <div className="flex gap-2 mt-4 md:col-span-2">
                                <button onClick={handleSavePartInfo} className="px-3 py-1 bg-green-500 text-white rounded-lg">
                                  บันทึก
                                </button>
                                <button onClick={() => setIsEditingPartInfo(false)} className="px-3 py-1 bg-gray-400 text-white rounded-lg">
                                  ยกเลิก
                                </button>
                              </div>
                            </>
                          ) : (
                            <>
                              <div>
                                <p className="font-medium">ชื่ออะไหล่:</p>
                                <p className="pl-4">{activePart ? activePart.name : '---'}</p>
                              </div>
                              <div>
                                <p className="font-medium">Part No.:</p>
                                <p className="pl-4">{activePart ? activePart.partNo : '---'}</p>
                              </div>
                              <div>
                                <p className="font-medium">รหัสอะไหล่:</p>
                                <p className="pl-4">{activePart ? activePart.partCode : '---'}</p>
                              </div>
                            </>
                          )}
                      </div>
                  </div>
                  
                  <div className="col-span-1 bg-white rounded-lg shadow p-4">
                    <h3 className="font-medium mb-2">ราคาชิ้นส่วนย่อย</h3>
                    <div className="mt-4 space-y-2 pt-4 border-t border-gray-200">
                      {currentSubParts.map((subPart) => (
                        <div key={subPart.name} className="flex flex-col border p-2 rounded">
                          <div className="flex items-center justify-between">
                            <div className="font-medium">{subPart.name}</div>
                            <div className="text-sm text-gray-500">ราคา: {subPart.price} บาท</div>
                          </div>
                          <div className="flex items-center justify-between mt-2">
                            <div className="flex items-center gap-2">
                              <span className="text-sm">จำนวน:</span>
                              <input
                                type="number"
                                min="1"
                                value={quantities[subPart.name] || 1}
                                onChange={(e) => handleQuantityChange(subPart.name, e.target.value)}
                                className="w-16 border rounded p-1 text-center"
                              />
                            </div>
                            <div className="flex gap-2">
                              {isEditMode && (
                                <button
                                  onClick={() => startEditingSubPartPrice(subPart)}
                                  className={`px-2 py-1 rounded ${activePart ? 'bg-yellow-500 text-white' : 'bg-gray-300 text-gray-500 cursor-not-allowed'}`}
                                  disabled={!activePart}
                                >
                                  แก้ไข
                                </button>
                              )}
                              <button
                                onClick={() => addToCart(activePart.id, subPart.name)}
                                className={`px-3 py-1 rounded ${activePart ? 'bg-green-600 text-white' : 'bg-gray-300 text-gray-500 cursor-not-allowed'}`}
                                disabled={!activePart}
                              >
                                เพิ่ม
                              </button>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div className="lg:w-1/3 w-full bg-white rounded-lg shadow p-4">
              <h2 className="text-lg font-semibold mb-2">ตะกร้าสินค้า</h2>
              <div id="cart-content">
                {cart.length === 0 ? (
                  <div className="py-6 text-gray-500">ตะกร้าว่าง</div>
                ) : (
                  <div className="space-y-4">
                    {Object.keys(groupedCartItems).map(category => (
                      <div key={category} className="border p-3 rounded-lg bg-gray-50">
                        <h3 className="font-bold text-gray-700 mb-2">{category}</h3>
                        <div className="space-y-2">
                          {groupedCartItems[category].map(item => (
                            <div key={item.id} className="flex flex-col border p-2 rounded bg-white">
                              <div className="flex justify-between items-center">
                                <div className="font-medium text-sm">{item.partName}</div>
                                <button onClick={() => removeFromCart(item.id)} className="px-2 py-1 bg-red-500 text-white rounded-lg text-xs">ลบ</button>
                              </div>
                              <div className="text-xs text-gray-500 flex justify-between items-center mt-1">
                                <span>ราคา: {item.price} บาท</span>
                                <div className="flex items-center gap-1">
                                  <span>จำนวน:</span>
                                  <input
                                    type="number"
                                    min={1}
                                    value={item.qty}
                                    onChange={(e) => updateQty(item.id, e.target.value)}
                                    className="w-12 border rounded p-1 text-center text-black"
                                  />
                                </div>
                              </div>
                              <div className="flex justify-between items-center mt-1 text-xs">
                                <span className="text-gray-500">ส่วนลด (%):</span>
                                <input
                                  type="number"
                                  min={0}
                                  max={100}
                                  value={item.discountPercent}
                                  onChange={(e) => updateDiscountPercent(item.id, e.target.value)}
                                  className="w-16 border rounded p-1 text-center text-black"
                                />
                              </div>
                              <div className="text-xs font-medium mt-1 text-right">
                                  <span className="text-gray-700">รวม: {((item.price * item.qty) * (1 - item.discountPercent / 100)).toFixed(2)} บาท</span>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    ))}

                    <div className="pt-2 mt-4 border-t border-gray-200">
                      <div className="flex justify-between font-medium">
                        <span>ยอดรวมสินค้า</span>
                        <span>{subtotal.toFixed(2)} บาท</span>
                      </div>
                      <div className="font-medium mt-2">ยอดรวมส่วนลด</div>
                      <div className="pl-4">
                        {Object.keys(discountsByCategory).map(category => (
                            discountsByCategory[category] > 0 && (
                              <div key={category} className="flex justify-between text-sm text-red-500">
                                <span>ส่วนลด {category}</span>
                                <span>- {discountsByCategory[category].toFixed(2)} บาท</span>
                              </div>
                            )
                        ))}
                        <div className="flex justify-between font-bold text-base mt-1">
                            <span>ส่วนลดทั้งหมด</span>
                            <span className="text-red-500">- {totalDiscount.toFixed(2)} บาท</span>
                        </div>
                      </div>
                      <div className="flex justify-between font-medium mt-1">
                        <span>ยอดรวมหลังหักส่วนลด</span>
                        <span>{subtotalAfterDiscount.toFixed(2)} บาท</span>
                      </div>
                      <div className="flex justify-between items-center font-medium mt-1">
                        <div className="flex items-center gap-2">
                          <span>VAT (%)</span>
                          <input
                            type="number"
                            value={vatRate}
                            onChange={(e) => setVatRate(Number(e.target.value))}
                            className="w-16 border rounded p-1 text-center text-black"
                            min="0"
                          />
                        </div>
                        <span>{vatAmount.toFixed(2)} บาท</span>
                      </div>
                      <div className="flex justify-between font-bold text-lg mt-2 pt-2 border-t border-gray-300">
                        <span>ยอดชำระทั้งหมด</span>
                        <span>{grandTotal.toFixed(2)} บาท</span>
                      </div>
                    </div>
                  </div>
                )}
              </div>
              <div className="flex gap-2 mt-4">
                <button onClick={handlePrint} className="px-3 py-2 bg-indigo-600 text-white rounded-lg">พิมพ์</button>
                <button onClick={handleSavePDF} className="px-3 py-2 bg-green-600 text-white rounded-lg">บันทึก</button>
                <button onClick={() => { setCart([]); }} className="px-3 py-2 bg-red-600 text-white rounded-lg">ล้างตะกร้า</button>
              </div>
            </div>
          </div>

          {editingSubPart && (
            <EditPriceModal
              subPart={editingSubPart}
              onSave={saveSubPartPrice}
              onCancel={cancelEditingSubPartPrice}
            />
          )}

          {isConfirmingDelete && (
            <ConfirmationModal
              message={`คุณแน่ใจหรือไม่ว่าต้องการลบอะไหล่หมายเลข ${activePart.id}?`}
              onConfirm={confirmDelete}
              onCancel={cancelDelete}
            />
          )}

          {showPasswordModal && (
              <PasswordModal
                onLogin={handleLogin}
                onCancel={() => { setShowPasswordModal(false); setLoginError(''); setPasswordInput(''); }}
                passwordInput={passwordInput}
                setPasswordInput={setPasswordInput}
                loginError={loginError}
              />
          )}
        </div>
      );
    }
    
    const root = ReactDOM.createRoot(document.getElementById('root'));
    root.render(<HinoPartsCatalog />);
  </script>
</body>
</html>
